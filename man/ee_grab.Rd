% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ee_grab.R
\name{ee_grab}
\alias{ee_grab}
\title{Request and import data from Earth Engine}
\usage{
ee_grab(targetArea = NULL, data = NULL, verbose = T)
}
\arguments{
\item{targetArea}{A \code{character} path to a local geo-file that should be used as a targetArea (.shp, .geojson, .kml). If the file is already uploaded, the upload is skipped.}

\item{data}{A \code{list} of \code{ee_data_image()} or \code{ee_data_collection()} functions which specify the requested data. Multiple functions are passed inside a \code{list}, while a single function can be passed directly.}

\item{verbose}{A \code{logical}, whether to inform the user about the processing state of the data Default is set to \code{True}.}
}
\value{
Object of class \code{sf}. The \code{ee_grab()} returns the targetArea file with the bands of the requested data added as columns.
}
\description{
The \code{ee_grab()} function takes a data description generated by \code{ee_data_image()} and \code{ee_data_collection()} and a targetArea area to request and import the data from the Earth Engine servers to R.
}
\section{\code{earthEngineGrabR} Workflow}{


\code{Find data} - Use Earth Engine's [Data Catalog](https://developers.google.com/earth-engine/datasets/) to browse and find datasets you want to grab using the earthEngineGrabR. Once you have found a dataset, use the [Earth Engine Snippet section] (link to earthEngineTutorial Site) to obtain the dataset ID and whether the dataset is an image or a collection of images. The snippet section consists of one line of code (don't open the link) and shows how Earth Engine loads the dataset. If it is an image, the  ee.Image(dataset-ID) constructor is used. if it is a collection the ee.ImageCollection(dataset-id) constructor is used instead.

3. - In R, 

\code{Grab data} - In R, use \code{ee_grab()} to request and import data from Earth Engine. The requesed data is specified with  an \code{ee_data} function. If the data is an image use \code{ee_data_image()}, if it's a collection use \code{ee_data_collection()}.
\code{ee_grab()} uses two arguments \code{data} and \code{targetAreaArea}. \code{eeData} takes the output of ee_data_* and the \code{ee_grab()} to request and import the dataset in a defined aggregation
}

\section{Internal processing}{


  The \code{ee_grab()} processing runs in 4 steps:

  1. Upload - The targetArea is uploaded to Google Drive.

  2. Request - The data is requested from Google Earth Engine and exported to Google Drive.

  3. Download -  The data is downloaded from Drive.

  4. Import - The data is imported to R and merged.
}

\examples{
\dontrun{
# Request a srtm image data product to get topographic data.
# Grab the spatial mean of the elevation band in the polygons of your targetArea. The calculation are based on a 100 meter scale, which means that the original SRTM data product is resampled to 100 * 100 meter Pixel size.

srtm_data <- ee_grab(targetArea = system.file("data/territories.shp", package = "earthEngineGrabR"),
                    data = ee_data_image(datasetID = "CGIAR/SRTM90_V4", 
                                                    spatialReducer = "mean", 
                                                    scale = 100, 
                                                    bands = "elevation"
                                                    )
                   )
                                                    
# Request a chirps collection data product to get precipitation data.
# Grab the yearly precipitation sum for 2016 and get the spatial mean in the polygons of your targetArea.

chirps_data <- ee_grab(targetArea = system.file("data/territories.shp", package = "earthEngineGrabR"),
                      data = ee_data_collection(datasetID = "UCSB-CHG/CHIRPS/DAILY",
                                                           spatialReducer = "mean",
                                                           temporalReducer = "sum", 
                                                           timeStart = "2016-01-01",
                                                           timeEnd = "2016-12-31", 
                                                           scale = 200
                                                           )
                     )                                                    
                                                    
                                                                                                                                                                                                                                                              
}

}
